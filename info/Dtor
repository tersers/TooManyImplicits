Destructor:
- No user-decl
- Or, = default

Deleted/Undefined:
- T has a non-static data member that cannot be destructed (has deleted or inaccessible destructor)
- T has direct or virtual base class that cannot be destructed (has deleted or inaccessible destructors)
- T is a union and has a variant member with non-trivial destructor. (since C++11)
- The implicitly-declared destructor is virtual (because the base class has a virtual destructor) and the lookup for the deallocation function (operator delete() results in a call to ambiguous, deleted, or inaccessible function.

Trivial:
- The destructor is not user-provided (meaning, it is either implicitly declared, or explicitly defined as defaulted on its first declaration)
- The destructor is not virtual (that is, the base class destructor is not virtual)
- All direct base classes have trivial destructors
- All non-static data members of class type (or array of class type) have trivial destructors
